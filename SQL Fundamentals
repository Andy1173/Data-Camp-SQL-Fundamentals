Subqueries inside FROM can help select columns from multiple tables in a single query.

Say you are interested in determining the number of languages spoken for each country. You want to present this information alongside each country's local_name, 
which is a field only present in the countries table and not in the languages table. You'll use a subquery inside FROM to bring information from these two tables together!

Select local_name from countries, with the aliased lang_num from your subquery (which has been nested and aliased for you as sub).
Use WHERE to match the code field from countries and sub.

-- Select local_name and lang_num from appropriate tables
SELECT local_name, sub.lang_num
FROM countries,
    (SELECT code, COUNT(*) AS lang_num
     FROM languages
     GROUP BY code) AS sub
-- Where codes match    
WHERE countries.code = sub.code
ORDER BY lang_num DESC;




Let's break down the solution to understand how it addresses the exercise requirements:

Subquery Creation:

The subquery (SELECT code, COUNT(*) AS lang_num FROM languages GROUP BY code) AS sub is designed to count the number of languages associated with each country code.
SELECT code, COUNT(*) AS lang_num selects the code from the languages table and counts the number of entries for each code, which represents the number of languages spoken in each country.
GROUP BY code ensures that the count is performed for each unique country code.
The subquery is aliased as sub, which allows us to reference it later in the main query.
Main Query:

SELECT local_name, sub.lang_num specifies that we want to retrieve the local_name from the countries table and the lang_num from the subquery.
FROM countries, (subquery) AS sub indicates that we are selecting data from the countries table and the subquery result, which is aliased as sub.
Joining the Tables:

WHERE countries.code = sub.code is the condition that joins the countries table with the subquery result. It ensures that we only combine rows where the code in the countries table matches the code in the subquery. This is crucial for associating each country's local name with the correct number of languages.
Ordering the Results:

ORDER BY lang_num DESC sorts the results in descending order based on the number of languages (lang_num). This means countries with more languages will appear first in the result set.
By following these steps, the solution effectively retrieves the local names of countries along with the number of languages spoken in each, matching the code fields to ensure accurate data association.



Sub Query Challenge:

Suppose you're interested in analyzing inflation and unemployment rate for certain countries in 2015. You are interested in countries with "Republic" or "Monarchy" as their form of government.

You will use the field gov_form to filter for these two conditions, which represents a country's form of government. You can review the different entries for gov_form in the countries table.


Instructions:

Select country code, inflation_rate, and unemployment_rate from economies.
Filter code for the set of countries which contain the words "Republic" or "Monarchy" in their gov_form.






